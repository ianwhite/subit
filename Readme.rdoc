= Subit

Simple ruby lib for performing substitutions on text.

The aims are:

* easy DSL for rule specification
* be able to specify sets of rules for different types of input
* be able to specify additional rules for replacing content in the original text, this
  feature is aimed at sanitising the original content while parsing occurs.
 
Uses include pre or post parsing textile to provide custom rules.

== Example

  subit = Subit.define do |p|
  
    h.rule "init", "isn't it"
  
    p.define :html do |h|
      h.rule 'Â£', '&pound;'
      h.rule '(euro)', '&#8364;'
      h.rule '/foo\d/, 'bar\\1'
      h.rule /#(\d+)/ do |ticket|
        ticket_path(ticket)
      end
      h.rule /Product\((\w+)\)/, :replace => lambda {|name| product_path(name) },
    end
    
  end

  # parses using root rules
  subit.parse("A string")

  # parses using root, and :html rules
  subit.parse("A string", :html)
  
  # parses using root, :html, :metric, and {:html, :metric} rules
  subit.parse("A string", :html, :metric)
  
  # to parse using only {:html, :metric} rules
  subit[:html, :metric].parse("A string")
  
  # you can pass an object where blocks will be instance_exec'd,
  # if not specified, the block will be called in its original context
  subit.parse("A string", :html, :exec => @some_object)
  
  # you can access the names of the rules used to parse, and any options passed to parse, in a block
  
  subit[:html].add :rule, 'a' do |match, options|
    puts "Inside the 'a' rule: #{options}"
    "A"
  end
  
  subit.parse 'a', :html, :foo => 'bar'
  # => 'A'
  Inside the 'a' rule: {:names => ['html'], :foo => 'bar'}
  
== Caveats

This library is not super fast at the moment.  The plan is to increase the
performance when the DSL and API is looking good.