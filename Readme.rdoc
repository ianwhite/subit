= Subit

Simple ruby lib for performing substitutions on text.

The aims are:

* easy DSL for rule specification
* be able to specify sets of rules for different types of input
* be able to specify additional rules for replacing content in the original text
 
Uses include pre or post parsing textile to provide custom rules.

== Example

  subit = Subit.define do |p|
  
    h.rule "init", "isn't it", :replace! => "isn't it"
  
    p.define :html do |h|
      h.rule 'Â£', '&pound;'
      h.rule '(euro)', '&#8364;'
      h.rule '/foo\d/, 'bar$1'
      h.rule /#(\d+)/ do |ticket|
        ticket_path(ticket)
      end
      h.rule /Product\((\w+)\)/,
        :replace => lambda {|name| product_path(name) },
        :replace! => lambda {|name| "Product(#{Product.find_by_name(name).id}-#{name})"}
    end
    
  end

  # parses using root rules
  subit.parse("A string")

  # parses using root, and :html rules
  subit.parse("A string", :html)
  
  # parses using root, :html, :metric, and {:html, :metric} rules
  subit.parse("A string", :html, :metric)
  
  # to parse using only {:html, :metric} rules
  subit[:html, :metric].parse("A string")
  
  # you can pass an object where blocks will be eval'd
  subit.parse("A string", :html, :exec => @some_object)
  
  # or you can set the eval context on the subit object
  subit.eval_context = @some_object
  
== Caveats

This library is non-performant at the moment to say the least.  The plan is to increase the
performance when the DSL and API is looking good.